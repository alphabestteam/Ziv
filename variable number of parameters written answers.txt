Python variables- Multiple parameters

The ability to work with an unlimited/ changing number of parameters can be very useful when we create functions that are meant to be more flexible and adaptable to different use cases. On the one hand this allows us to reuse the same code in different scenarios. On the other hand, it makes the code less readable and clear.  Two examples of functions that don’t have a limit on their number of parameters are ‘min’ and ‘max. You can pass any number of arguments to min and max. 

*args is a keyword used when defining functions to indicate that a function can accept a variable number of parameters. "args" is actually short for "arguments." When *args is used in a function definition, it allows the developer to pass any number of positional arguments to that function. Any arguments passed will be added to a tuple within the function. The line print(args) (when  written inside a function) will print the args variable, which contains a tuple of all the positional arguments that were passed to the function. 

**kwargs is a keyword used when defining functions to indicate that a function can accept a variable number of  keyword arguments. "kwargs" is actually short for "keyword arguments." When **kwargs is used in a function definition, it allows the developer to pass any number of  keyword arguments to that function.  Any keyword arguments passed will be added to a dictionary within the function. . It allows you to pass named arguments without knowing their names in advance.When used inside a print statement, each key-value pair in the kwargs dictionary will be printed. 

*args and **kwargs are vastly different. *args accepts positional arguments while **kwargs accepts keyword arh=guments. Moreover, *args stores its content in a tuple, and **kwargs in a dictionary. Also, with*args, the order  of positional arguments matters because they are added to the tuple in the same order they are passed. However, with **kwargs, the order of keyword arguments doesn't matter because they are added as key-value pairs in a dictionary. *args and **kwargs can be used together in a function definition, creating a function that accepts both a variable number of positional arguments and a variable number of keyword arguments. Such function definition allows the function to be extremely flexible in terms of the parameter types and numbers it can accept.

Packing and unpacking are “twin” processes. Packing refers to grouping multiple values together into a data structure(like tuples, lists, dictionaries, etc). Unpacking is the exact opposite- the extraction of those values from the data structure into individual variables.

Packing and unpacking are usually used when dealing with functions that return multiple values or when working with iterables. It is also helpful when the packed arguments are required separately to perform operations. For example, both *args and **kwargs use the concepts of packing and unpacking. Both collect arguments and pack them into tuples/dictionaries. The values can be unpacked from the iterables inside the function.
