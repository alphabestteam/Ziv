Python File Handling and JSON

Files are a fundamental part of coding since they allow the code to use and store external data, which continues on at the end of the program's runtime since they are stored on the hard drive. Files allow developers to store data for long-term or even permanent use. When data is written from the code to files, the data  can be accessed even after a program has finished executing. This is far more useful than using simple variables since they are stored on the RAM and will be erased once the program is terminated. Files also provide a way to retrieve data that was saved previously: programs can read data from files and use it in the code. Additionally, files offer a way to share information between different programs or systems, since they can easily be transported. 
When opening a file with the open() function, the second parameter is an indicator for opening mode of the file. “r”  indicates that the file can be read, but not edited. “w” means that you can write to the file, replacing contents. “a” is for append, meaning you can add text to the file. “B” is for opening the file in binary form. 
JSON, short for JavaScript Object Notation, is a data format that is both easy for humans to read/write in and  easy for computers to parse and generate. JSON is usually used for storing and passing data between a server and a client, different parts of an application, or for configuration data. 
When working with JSON, one will usually use the functions dump, dumps, load, and loads for conversion. JSON dump and dumps convert Python to JSON in two different forms. json.dump() is used to write a Python object into a file as a JSON formatted data, while json.dumps() is used to write a Python object into a JSON String. The json.load()function reads JSON data directly from a file and converts it into a dictionary, while  the json.loads() function converts JSON string to a dictionary.
