Python function- intermediate
1. A function is a block of code that executes a specific task when summoned. The concept behind this is that some tasks will be used more than once throughout the code. 
Therefore, those same lines can be summoned repeatedly with the function’s name, instead of the developer having to write them over and over again. 
A function can receive data, adapt and perform operations on it, and return values. They are most useful when we want to perform the same task multiple times. 

2. A return value is the data that the function returns after it has been called and finished performing its task. The return statement immediately ends the running of a function and sends back a specified value. For example: 
def x():
	y = 2 + 2
return y
Whenever it is summoned, function x() will return the variable y. Functions can return one or multiple values, of any type, and even return nothing.

3. The concepts of passing by value versus passing by reference refer to how data is passed to methods and functions.
 Pass by value means that the data is copied and passed to the function, meaning the function isn’t directly processing these variables.
 Therefore any changes made inside the function would not affect the variable outside the function. On the other hand, passing by reference means a reference (pointer)
 to the original data is passed to the function. Meaning any changes made inside the function will directly affect the original data.

4. Scope is a term that refers to the area within the code where a variable exists and can be accessed and modified. 
A variable is only “alive” within its scope and does not exist outside of it. A scope can be defined in various ways, such as code blocks 
marked with indentation or inside a function call. Any variable defined within these blocks can only be accessed inside of them.
 Once outside of their scope, the variables are destroyed and they’re memory is returned(garbage collection).

5. Recursion refers to when a function calls on itself repeatedly to solve a task. The function will have a statement within its block where it summons itself with different parameters. 
The function will call on itself until it meets its base case: a statement that when fulfilled, stops the recursion. 
Without it, the recursion will be infinite. With each calling, the function becomes closer to finding the result that it has been tasked with finding. In the end, it will return the result. 

6. Recursions are an elegant solution but only when used properly. Generally speaking, recursion should be used when the problem can be broken
 down into sub-problems and when the base case- the condition on which the recursion is built- is clear, as well as the way to progress towards it.
 It is possible to write a code with absolutely no recursion. It is a technique and not a requirement. Most often developers would choose iterative methods and other tools.


7.When comparing runtime, loops are faster than recursions. This is because of the massive overhead which stems from the repeating
 function calls. Loops perform less operations and do not create additional function contexts for each run. They usually use a fixed amount of memory.


